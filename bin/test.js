// Generated by Haxe 4.3.0-rc.1+
(function ($global) { "use strict";
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var htmlHelper_canvas_CanvasSetup = function() {
	this.divertTrace = new htmlHelper_tools_DivertTrace();
	var e = null;
	var this1;
	if(e == null) {
		var canvas = window.document.createElement("canvas");
		var dom = canvas;
		var style = dom.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = "0px";
		style.top = "0px";
		style.position = "absolute";
		this1 = canvas;
	} else {
		this1 = e;
	}
	var canvas = this1;
	canvas.width = 1024;
	canvas.height = 768;
	var dom = canvas;
	var style = dom.style;
	style.background = "black";
	window.document.body.appendChild(canvas);
	var this1 = new htmlHelper_canvas_CanvasPlus(canvas.getContext("2d",null),10,10);
	this.surface = this1;
	var factor = 4.;
	this.overSampleCanvas(canvas,this.surface.me,factor);
};
htmlHelper_canvas_CanvasSetup.__name__ = true;
htmlHelper_canvas_CanvasSetup.prototype = {
	overSampleCanvas: function(canvas,ctx,factor) {
		var width = canvas.width;
		var height = canvas.height;
		canvas.width = 0 | (width * factor | 0);
		canvas.height = 0 | (height * factor | 0);
		canvas.style.width = width + "px";
		canvas.style.height = height + "px";
		ctx.scale(factor,factor);
	}
};
var htmlHelper_canvas_CanvasPlus = function(me,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.me = me;
};
htmlHelper_canvas_CanvasPlus.__name__ = true;
var htmlHelper_tools_AnimateTimer = function() { };
htmlHelper_tools_AnimateTimer.__name__ = true;
htmlHelper_tools_AnimateTimer.loop = function(tim) {
	window.requestAnimationFrame(htmlHelper_tools_AnimateTimer.loop);
	if(htmlHelper_tools_AnimateTimer.onFrame != null) {
		htmlHelper_tools_AnimateTimer.onFrame(htmlHelper_tools_AnimateTimer.counter);
	}
	htmlHelper_tools_AnimateTimer.counter++;
	return true;
};
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
htmlHelper_tools_DivertTrace.__name__ = true;
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var lsystemx_Drawing = function(lsystem,stack,traceAxiom) {
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	this.stack = stack;
	this.axiom = lsystem.get_options().axiom;
	if(traceAxiom) {
		haxe_Log.trace("axiom " + this.axiom,{ fileName : "src/lsystemx/Drawing.hx", lineNumber : 12, className : "lsystemx.Drawing", methodName : "new"});
	}
	this.length = this.axiom.length;
	this.count = 0;
};
lsystemx_Drawing.__name__ = true;
var lsystemx_LNode = function(pos_,angle_) {
	this.pos = pos_;
	this.angle = angle_;
};
lsystemx_LNode.__name__ = true;
lsystemx_LNode.prototype = {
	transform: function(distance) {
		var deg = this.angle * (Math.PI / 180.0);
		var pos_transform = new lsystemx_Mat1x2(this.pos.x + Math.cos(deg) * distance,this.pos.y + Math.sin(deg) * distance);
		return new lsystemx_LNode(pos_transform,this.angle);
	}
	,clone: function() {
		return new lsystemx_LNode(new lsystemx_Mat1x2(this.pos.x,this.pos.y),this.angle);
	}
	,addAngle: function(q) {
		this.angle += q;
	}
};
var lsystemx_LSystem = function(options) {
	this.m_options = options;
	this.m_rules = new haxe_ds_StringMap();
	this.createStandardRules();
};
lsystemx_LSystem.__name__ = true;
lsystemx_LSystem.prototype = {
	get_options: function() {
		return this.m_options;
	}
	,createStandardRules: function() {
		this.m_rules.h["+"] = "+";
		this.m_rules.h["-"] = "-";
		this.m_rules.h["["] = "[";
		this.m_rules.h["]"] = "]";
	}
	,iterate: function(i) {
		var currentIteration = 0;
		while(currentIteration < i) {
			var commands = this.m_options.axiom.split("");
			var newAxiom = "";
			var _g = 0;
			while(_g < commands.length) {
				var command = commands[_g];
				++_g;
				newAxiom += Object.prototype.hasOwnProperty.call(this.m_rules.h,command) ? this.m_rules.h[command] : "";
			}
			this.m_options.axiom = newAxiom;
			++currentIteration;
		}
	}
	,setRule: function(axiom,rule) {
		this.m_rules.h[axiom] = rule;
	}
};
var lsystemx_Mat1x2 = function(x,y) {
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
};
lsystemx_Mat1x2.__name__ = true;
var lsystemx_TwoNodes = function(start,end) {
	this.start = start;
	this.end = end;
};
lsystemx_TwoNodes.__name__ = true;
var lsystemx_demoUse_CanvasUse = function() {
	this.lastColor = -1;
	this.dt = 0;
	this.canvasSetup = new htmlHelper_canvas_CanvasSetup();
	this.g = this.canvasSetup.surface;
	var this1 = this.g;
	var col = this.lastColor;
	var alpha = null;
	this1.me.lineWidth = 1;
	if(alpha != null && alpha != 1.0) {
		var r = col >> 16 & 255;
		var g = col >> 8 & 255;
		var b = col & 255;
		this1.me.strokeStyle = "rgba(" + r + "," + g + "," + b + "," + alpha + ")";
	} else {
		var tmp = StringTools.hex(col,6);
		this1.me.strokeStyle = "#" + tmp;
	}
	this.animationTest = new lsystemx_drawings_AnimationTest($bind(this,this.fillLine),1025,768,true);
	var _gthis = this;
	if(htmlHelper_tools_AnimateTimer.s == null) {
		htmlHelper_tools_AnimateTimer.s = window.document.createElement("style");
		htmlHelper_tools_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
		window.document.getElementsByTagName("head")[0].appendChild(htmlHelper_tools_AnimateTimer.s);
		htmlHelper_tools_AnimateTimer.s.animation = "spin 1s linear infinite";
		htmlHelper_tools_AnimateTimer.loop(60.0);
	}
	htmlHelper_tools_AnimateTimer.onFrame = function(v) {
		_gthis.animationTest.update(_gthis.dt++);
	};
};
lsystemx_demoUse_CanvasUse.__name__ = true;
lsystemx_demoUse_CanvasUse.prototype = {
	fillLine: function(sx,sy,ex,ey,thick,color,alpha) {
		if(this.lastColor != color) {
			var this1 = this.g;
			var alpha = null;
			this1.me.lineWidth = thick;
			if(alpha != null && alpha != 1.0) {
				var r = color >> 16 & 255;
				var g = color >> 8 & 255;
				var b = color & 255;
				this1.me.strokeStyle = "rgba(" + r + "," + g + "," + b + "," + alpha + ")";
			} else {
				var tmp = StringTools.hex(color,6);
				this1.me.strokeStyle = "#" + tmp;
			}
		}
		var this1 = this.g;
		this1.x = sx;
		this1.y = sy;
		this1.me.moveTo(sx,sy);
		var this1 = this.g;
		this1.x = ex;
		this1.y = ey;
		this1.me.lineTo(ex,ey);
	}
};
function lsystemx_demoUse_CanvasUse_main() {
	new lsystemx_demoUse_CanvasUse();
}
var lsystemx_drawings_AnimationTest = function(fillLine,wid,hi,traceAxiom) {
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	this.speed = 100;
	this.time = 0;
	this.fillLine = fillLine;
	this.wid = wid;
	this.hi = hi;
	this.currentThick = 5.;
	this.currentColor = -65536;
	this.traceAxiom = traceAxiom;
	this.colors = [-65536,-16711936,-16776961,-65536,-16711936,-16711936,-65536,-16711936,-256,-65536,-6710887];
	var pos = new lsystemx_Mat1x2(700,600);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	var this1;
	var options = { axiom : "A"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("A","B-A-B");
	lsystem.setRule("B","A+B+A");
	lsystem.iterate(7);
	var angle = 270.0;
	var line = $bind(this,this.line);
	var node = new lsystemx_LNode(pos,angle);
	var this2 = [];
	this2[0] = node;
	var statestack = this2;
	this1 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this1.render = function(charCode) {
		var s = this1.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(60.0);
			break;
		case 45:
			s[s.length - 1].addAngle(-60.0);
			break;
		case 65:case 66:
			var line1 = line;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(4.5);
			s[s.length - 1] = newState;
			line1(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp = this1;
	var pos = new lsystemx_Mat1x2(100,600);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	var this2;
	var options = { axiom : "W"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("W","+++X--F--ZFX+");
	lsystem.setRule("X","---W++F++YFW-");
	lsystem.setRule("Y","+ZFX--F--Z+++");
	lsystem.setRule("Z","-YFW++F++Y---");
	lsystem.iterate(6);
	var angle = 270.0;
	var d = 10;
	var line1 = $bind(this,this.line);
	var node = new lsystemx_LNode(pos,angle);
	var this3 = [];
	this3[0] = node;
	var statestack = this3;
	this2 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this2.render = function(charCode) {
		var s = this2.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(30.0);
			break;
		case 45:
			s[s.length - 1].addAngle(-30.0);
			break;
		case 70:case 87:case 88:case 89:case 90:
			var line = line1;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp1 = this2;
	var pos = new lsystemx_Mat1x2(this.wid / 2,this.hi / 2);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	var this3;
	var options = { axiom : "[7]++[7]++[7]++[7]++[7]"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("6","81++91----71[-81----61]++");
	lsystem.setRule("7","+81--91[---61--71]+");
	lsystem.setRule("8","-61++71[+++81++91]-");
	lsystem.setRule("9","--81++++61[+91++++71]--71");
	lsystem.setRule("1","");
	lsystem.iterate(5);
	var angle = 270.0;
	var d1 = 20;
	var line2 = $bind(this,this.line);
	var node = new lsystemx_LNode(pos,angle);
	var this4 = [];
	this4[0] = node;
	var statestack = this4;
	this3 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this3.render = function(charCode) {
		var s = this3.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(36.0);
			break;
		case 45:
			s[s.length - 1].addAngle(-36.0);
			break;
		case 49:case 54:case 55:case 56:case 57:
			var line = line2;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d1);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp2 = this3;
	var pos = new lsystemx_Mat1x2(550,600);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	var this4;
	var green = -16711936;
	var blue = -16776961;
	var red = -65536;
	var options = { axiom : "F"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("F","AFF[B-F++F][C+F--F]C++F--F");
	lsystem.iterate(5);
	var angle = 180.0;
	var d2 = 1;
	var line3 = $bind(this,this.line);
	var _g = this;
	var count = 3;
	var color = function(col) {
		_g.colors[count] = col;
	};
	var node = new lsystemx_LNode(pos,angle);
	var this5 = [];
	this5[0] = node;
	var statestack = this5;
	this4 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this4.render = function(charCode) {
		var s = this4.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(27.0);
			break;
		case 45:
			s[s.length - 1].addAngle(-27.0);
			break;
		case 65:
			color(red);
			break;
		case 66:
			color(green);
			break;
		case 67:
			color(blue);
			break;
		case 70:
			var line = line3;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d2);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp3 = this4;
	var pos = new lsystemx_Mat1x2(750,600);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	var this5;
	var green1 = -16711936;
	var blue1 = -16776961;
	var red1 = -65536;
	var options = { axiom : "F"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("F","AFF-[B-F+F+F]+[C+F-F-F]");
	lsystem.iterate(5);
	var angle = 270.0;
	var d3 = 5;
	var line4 = $bind(this,this.line);
	var _g1 = this;
	var count1 = 4;
	var color1 = function(col) {
		_g1.colors[count1] = col;
	};
	var node = new lsystemx_LNode(pos,angle);
	var this6 = [];
	this6[0] = node;
	var statestack = this6;
	this5 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this5.render = function(charCode) {
		var s = this5.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(22.0);
			break;
		case 45:
			s[s.length - 1].addAngle(-22.0);
			break;
		case 65:
			color1(red1);
			break;
		case 66:
			color1(green1);
			break;
		case 67:
			color1(blue1);
			break;
		case 70:
			var line = line4;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d3);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp4 = this5;
	var pos = new lsystemx_Mat1x2(500,200);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	var this6;
	var options = { axiom : "F++F++F"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("F","F-F++F-F");
	lsystem.setRule("X","FF");
	lsystem.iterate(4);
	var angle = 270.0;
	var d4 = 2;
	var line5 = $bind(this,this.line);
	var node = new lsystemx_LNode(pos,angle);
	var this7 = [];
	this7[0] = node;
	var statestack = this7;
	this6 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this6.render = function(charCode) {
		var s = this6.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(60.0);
			break;
		case 45:
			s[s.length - 1].addAngle(-60.0);
			break;
		case 70:case 88:
			var line = line5;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d4);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp5 = this6;
	var pos = new lsystemx_Mat1x2(90,600);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = false;
	}
	var this7;
	var options = { axiom : "A"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("A","B-[[A]+A]+B[+BA]-A");
	lsystem.setRule("B","BB");
	lsystem.iterate(4);
	var angle = 270.0;
	var d5 = 4;
	var line6 = $bind(this,this.line);
	var node = new lsystemx_LNode(pos,angle);
	var this8 = [];
	this8[0] = node;
	var statestack = this8;
	this7 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this7.render = function(charCode) {
		var s = this7.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(25.0);
			break;
		case 45:
			s[s.length - 1].addAngle(-25.0);
			break;
		case 65:case 66:
			var line = line6;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d5);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp6 = this7;
	var pos = new lsystemx_Mat1x2(800,300);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	var this8;
	var options = { axiom : "X"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("X","F[+X][-X]FX");
	lsystem.setRule("F","FF");
	lsystem.iterate(7);
	var angle = 270.0;
	var d6 = 1;
	var line7 = $bind(this,this.line);
	var node = new lsystemx_LNode(pos,angle);
	var this9 = [];
	this9[0] = node;
	var statestack = this9;
	this8 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this8.render = function(charCode) {
		var s = this8.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(27.5);
			break;
		case 45:
			s[s.length - 1].addAngle(-27.5);
			break;
		case 70:case 88:
			var line = line7;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d6);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp7 = this8;
	var pos = new lsystemx_Mat1x2(400,400);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	var this9;
	var options = { axiom : "X"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("X","F[+X]F[-X]+X");
	lsystem.setRule("F","FF");
	lsystem.iterate(7);
	var angle = 270.0;
	var d7 = 1;
	var line8 = $bind(this,this.line);
	var node = new lsystemx_LNode(pos,angle);
	var this10 = [];
	this10[0] = node;
	var statestack = this10;
	this9 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this9.render = function(charCode) {
		var s = this9.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(20.);
			break;
		case 45:
			s[s.length - 1].addAngle(-20.);
			break;
		case 70:case 88:
			var line = line8;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d7);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp8 = this9;
	var pos = new lsystemx_Mat1x2(80,170);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = true;
	}
	var this10;
	var options = { axiom : "FX"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("X","X+YF");
	lsystem.setRule("Y","FX-Y");
	lsystem.iterate(10);
	var angle = 270.0;
	var d8 = 10;
	var line9 = $bind(this,this.line);
	var node = new lsystemx_LNode(pos,angle);
	var this11 = [];
	this11[0] = node;
	var statestack = this11;
	this10 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this10.render = function(charCode) {
		var s = this10.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(90.0);
			break;
		case 45:
			s[s.length - 1].addAngle(-90.0);
			break;
		case 70:
			var line = line9;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d8);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	var tmp9 = this10;
	var pos = new lsystemx_Mat1x2(this.wid - 50,this.hi - 50);
	var traceAxiom = this.traceAxiom;
	if(traceAxiom == null) {
		traceAxiom = false;
	}
	var this11;
	var options = { axiom : "A"};
	var lsystem = new lsystemx_LSystem(options);
	lsystem.setRule("A","B-A-B");
	lsystem.setRule("B","A+B+A");
	lsystem.iterate(8);
	var angle = 180.0;
	var d9 = 2;
	var line10 = $bind(this,this.line);
	var node = new lsystemx_LNode(pos,angle);
	var this12 = [];
	this12[0] = node;
	var statestack = this12;
	this11 = new lsystemx_Drawing(lsystem,statestack,traceAxiom);
	this11.render = function(charCode) {
		var s = this11.stack;
		switch(charCode) {
		case 43:
			s[s.length - 1].addAngle(60.0);
			break;
		case 45:
			s[s.length - 1].addAngle(-60.0);
			break;
		case 65:case 66:
			var line = line10;
			var currentState = s[s.length - 1];
			var newState = currentState.transform(d9);
			s[s.length - 1] = newState;
			line(new lsystemx_TwoNodes(currentState,newState));
			break;
		case 91:
			var currentState = s[s.length - 1];
			s[s.length] = currentState.clone();
			break;
		case 93:
			s.pop();
			break;
		}
	};
	this.drawings = [tmp,tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7,tmp8,tmp9,this11];
};
lsystemx_drawings_AnimationTest.__name__ = true;
lsystemx_drawings_AnimationTest.prototype = {
	clear: function() {
	}
	,line: function(line) {
		var start = line.start;
		var end = line.end;
		this.fillLine(start.pos.x,start.pos.y,end.pos.x,end.pos.y,this.currentThick,this.currentColor);
	}
	,update: function(dt) {
		if(this.time == 1000) {
			this.speed = 10;
			this.clear();
		}
		var _g = 0;
		var _g1 = this.speed;
		while(_g < _g1) {
			var i = _g++;
			var j = 0;
			var _g2 = 0;
			var _g3 = this.drawings;
			while(_g2 < _g3.length) {
				var drawing = _g3[_g2];
				++_g2;
				if(this.time > 1000 || (j == 3 || j == 4)) {
					this.currentColor = this.colors[j];
					if(drawing.count < drawing.length) {
						if(drawing.render != null) {
							drawing.render(drawing.axiom.charCodeAt(drawing.count++));
						}
					}
				}
				++j;
			}
		}
		this.time++;
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
htmlHelper_tools_AnimateTimer.counter = 0;
lsystemx_demoUse_CanvasUse_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
